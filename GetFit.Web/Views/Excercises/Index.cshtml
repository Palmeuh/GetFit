@model GetFit.Infrastructure.SearchSortFilter.PaginatedList<GetFit.Domain.Models.Excercise>

@{
    ViewData["Title"] = "Index";
}
<section id="excerciseIntro">
    <h1>Index</h1>

    <p>
        <a asp-action="Create">Create New</a>
    </p>
    <form asp-action="Index" method="get">
        <div class="form-actions no-color">
            <p>
                Find by name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
                <input type="submit" value="Search" class="btn btn-primary" /> |
                <a asp-action="Index">Back to Full List</a>
            </p>
        </div>
    </form>
    @if (Model != null)
    {
        <div class="tableContainer">

            <table class="table">
                <thead>
                    <tr>
                        <th>
                            <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Name</a>
                        </th>
                        <th>
                            <a asp-action="Index" asp-route-sortOrder="@ViewData["MuscleGroupSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Category</a>
                        </th>
                        <th>
                            Description
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr class="tableRow">
                            <td class="excerciseName">
                                @Html.DisplayFor(modelItem => item.Name)
                            </td>
                            <td class="excerciseCategory">
                                @Html.DisplayFor(modelitem => item.Category)
                            </td>
                            <td class="excerciseDescription">
                                @Html.DisplayFor(modelItem => item.Description)
                            </td>
                            <td class="tableActions">
                                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>


        var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.HasNextPage ? "disabled" : "";


        <a asp-action="Index"
           asp-route-sortOrder="@ViewData["CurrentSort"]"
           asp-route-pageNumber="@(Model.PageIndex - 1)"
           asp-route-currentFilter="@ViewData["CurrentFilter"]"
           class="btn btn-default @prevDisabled">
            Previous
        </a>
        <a asp-action="Index"
           asp-route-sortOrder="@ViewData["CurrentSort"]"
           asp-route-pageNumber="@(Model.PageIndex + 1)"
           asp-route-currentFilter="@ViewData["CurrentFilter"]"
           class="btn btn-default @nextDisabled">
            Next
        </a>
    }
    else
    {
        <div>
            <h1>Not Found! </h1>
        </div>
    }
</section>
